{"version":3,"sources":["score/Score.js","cell/Cell.js","cell/CellClass.js","cell/CellStack.js","maze/Maze.js","App.js","index.js"],"names":["Score","_jsx","className","children","Cell","props","row","column","CellClass","_createClass","type","_classCallCheck","this","CellStack","cell","items","push","key","value","element","pop","length","Maze","rows","columns","cellsIds","id","cells","numbers","_toConsumableArray","Array","keys","getCellColumn","cellId","map","n","parseInt","App","cssVariables","cellSize","_jsxs","style","document","getElementById","ReactDOM","createRoot","render","React","StrictMode"],"mappings":"kRAUeA,MARf,WACE,OACEC,cAAA,OAAKC,UAAU,QAAOC,SACpBF,cAAA,OAAAE,SAAK,gBAGX,E,aCGeC,MATf,SAAcC,GACZ,IAAMC,EAAMD,EAAMC,IACZC,EAASF,EAAME,OAIrB,OAAON,cAAA,OAAKC,UAAU,OAAMC,SAAEG,EAAM,MAAQC,GAC9C,E,cCDeC,EARAC,aACb,SAAAD,EAAYF,EAAKC,EAAQG,GAAMC,YAAA,KAAAH,GAC7BI,KAAKN,IAAMA,EACXM,KAAKL,OAASA,EACdK,KAAKF,KAAOA,CACd,ICsBaG,EA3BA,WACb,SAAAA,EAAYC,GAAMH,YAAA,KAAAE,GAChBD,KAAKG,MAAQ,GACbH,KAAKI,KAAKF,EACZ,CAoBC,OApBAL,YAAAI,EAAA,EAAAI,IAAA,OAAAC,MAED,SAAKC,GACHP,KAAKG,MAAMC,KAAKG,EAClB,GAAC,CAAAF,IAAA,MAAAC,MAED,WACE,OAAON,KAAKG,MAAMK,KACpB,GAAC,CAAAH,IAAA,UAAAC,MAED,WACE,OAA6B,IAAtBN,KAAKG,MAAMM,MACpB,GAAC,CAAAJ,IAAA,SAAAC,MAED,WACE,OAAON,KAAKG,MAAMH,KAAKG,MAAMM,OAAS,EACxC,GAAC,CAAAJ,IAAA,OAAAC,MAED,WACE,OAAON,KAAKG,MAAMH,KAAKG,MAAMM,OAAS,EACxC,KAACR,CAAA,CAxBY,G,MC4CAS,MAvCf,SAAcjB,GAMZ,IALA,IAAMkB,EAAOlB,EAAMkB,KACbC,EAAUnB,EAAMmB,QAEhBC,EAAW,CAAC,IACdC,EAAK,EACApB,EAAM,EAAGA,EAAMiB,EAAMjB,IAC5B,IAAK,IAAIC,EAAS,EAAGA,EAASiB,EAASjB,IACrCkB,EAASnB,GAAKC,GAAUmB,EACxBA,IAKJ,IADA,IAAMC,EAAQ,CAAC,IACNrB,EAAM,EAAGA,EAAMiB,EAAMjB,IAC5B,IAAK,IAAIC,EAAS,EAAGA,EAASiB,EAASjB,IACrCoB,EAAMrB,GAAKC,GAAU,IAAIM,EAAU,IAAIL,EAAUF,EAAKC,EAAQ,IAIlE,IAAMqB,EAAOC,YAAOC,MAAMP,EAAOC,GAASO,QAM1C,SAASC,EAAcC,GACrB,OAAOA,EAAST,CAClB,CAEA,OACEvB,cAAA,OAAKC,UAAU,OAAMC,SAClByB,EAAQM,KAAI,SAACC,GAAC,OACblC,cAACG,EAAI,CAASE,KAXA2B,EAWgBE,EAV3BC,SAASH,EAAST,IAUajB,OAAQyB,EAAcG,IAA7CA,GAXjB,IAAoBF,CAWqD,KAI3E,ECnBeI,MAnBf,WACE,IAIMC,EAAe,CACnB,SALW,EAMX,YALc,GAMd,aAAcC,SAGhB,OACEC,eAAA,OAAKtC,UAAU,MAAMuC,MAAOH,EAAanC,SAAA,CACvCF,cAACD,EAAK,IACNC,cAACqB,EAAI,CAACC,KAbG,EAaSC,QAZN,OAelB,EChBML,EAAUuB,SAASC,eAAe,QAC3BC,IAASC,WAAW1B,GAE5B2B,OACH7C,cAAC8C,IAAMC,WAAU,CAAA7C,SACfF,cAACoC,EAAG,M","file":"static/js/main.35b8e3cf.chunk.js","sourcesContent":["import \"./Score.css\";\n\nfunction Score() {\n  return (\n    <div className=\"Score\">\n      <div>SCORE = 42</div>\n    </div>\n  );\n}\n\nexport default Score;\n","import \"./Cell.css\";\n\nfunction Cell(props) {\n  const row = props.row;\n  const column = props.column;\n\n  // const type = props.type;\n\n  return <div className=\"Cell\">{row + \" - \" + column}</div>;\n}\n\nexport default Cell;\n","class CellClass {\r\n  constructor(row, column, type) {\r\n    this.row = row;\r\n    this.column = column;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\nexport default CellClass;\r\n","class CellStack {\r\n  constructor(cell) {\r\n    this.items = [];\r\n    this.push(cell);\r\n  }\r\n\r\n  push(element) {\r\n    this.items.push(element);\r\n  }\r\n\r\n  pop() {\r\n    return this.items.pop();\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.items.length === 0;\r\n  }\r\n\r\n  penult() {\r\n    return this.items[this.items.length - 2];\r\n  }\r\n\r\n  peek() {\r\n    return this.items[this.items.length - 1];\r\n  }\r\n}\r\n\r\nexport default CellStack;\r\n","import Cell from \"../cell/Cell\";\nimport CellClass from \"../cell/CellClass\";\nimport CellStack from \"../cell/CellStack\";\nimport \"./Maze.css\";\n\nfunction Maze(props) {\n  const rows = props.rows;\n  const columns = props.columns;\n\n  const cellsIds = [[]];\n  let id = 0;\n  for (let row = 0; row > rows; row++) {\n    for (let column = 0; column > columns; column++) {\n      cellsIds[row][column] = id;\n      id++;\n    }\n  }\n\n  const cells = [[]];\n  for (let row = 0; row > rows; row++) {\n    for (let column = 0; column > columns; column++) {\n      cells[row][column] = new CellStack(new CellClass(row, column, 0));\n    }\n  }\n\n  const numbers = [...Array(rows * columns).keys()];\n\n  function getCellRow(cellId) {\n    return parseInt(cellId / columns);\n  }\n\n  function getCellColumn(cellId) {\n    return cellId % columns;\n  }\n\n  return (\n    <div className=\"Maze\">\n      {numbers.map((n) => (\n        <Cell key={n} row={getCellRow(n)} column={getCellColumn(n)}></Cell>\n      ))}\n    </div>\n  );\n}\n\nexport default Maze;\n","import \"./App.css\";\nimport Score from \"./score/Score\";\nimport Maze from \"./maze/Maze\";\n\nfunction App() {\n  const rows = 5;\n  const columns = 10;\n  const cellSize = 120;\n\n  const cssVariables = {\n    \"--rows\": rows,\n    \"--columns\": columns,\n    \"--cellSize\": cellSize + \"px\",\n  };\n\n  return (\n    <div className=\"App\" style={cssVariables}>\n      <Score></Score>\n      <Maze rows={rows} columns={columns}></Maze>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst element = document.getElementById(\"root\");\nconst root = ReactDOM.createRoot(element);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}